package array

/**
 * 根据百度百科，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在1970年发明的细胞自动机。
 *
 * 给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞具有一个初始状态 live（1）即为活细胞，
 * 或 dead（0）即为死细胞。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：
 *
 * 如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；
 * 如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
 * 如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；
 * 如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
 * 根据当前状态，写一个函数来计算面板上细胞的下一个（一次更新后的）状态。
 * 下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。
 *
 * 示例:
 *
 * 输入:
 * [
 *   [0,1,0],
 *   [0,0,1],
 *   [1,1,1],
 *   [0,0,0]
 * ]
 * 输出:
 * [
 *   [0,0,0],
 *   [1,0,1],
 *   [0,1,1],
 *   [0,1,0]
 * ]
 * 进阶:
 *
 * 你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。
 * 本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？
 *
 */
/**
 * 数组原地算法的思路总是需要将当前修改的值存储为一个不影响当前判断的值，然后在下一次遍历中再去更新正确的值
 * x,y的作用是便于计算求某个数周围的索引
 */
fun gameOfLife(board: Array<IntArray>): Unit {
    //x坐标的偏移量
    val x = intArrayOf(0, 0, 1, 1, 1, -1, -1, -1)
    val y = intArrayOf(1, -1, 0, 1, -1, 0, 1, -1)

    /**
     * 先进行一次遍历
     * 把需要修改的值转换成 另一种值 即 -1代表着 存活->死亡 -2代表着 死亡->存货
     * x,y分别代表了 8个方向上的偏移量，对应着i,j的偏移量,遍历8次即可获得对应的周围的最多8个细胞的存活状态
     *
     */
    for (i in board.indices) {
        for (j in board[i].indices) {
            var liveCount = 0
            for (k in 0 until 8) {
                val offsetX = i + x[k]
                val offsetY = j + y[k]
                if (offsetX < 0 || offsetX >= board.size || offsetY < 0 || offsetY >= board[0].size) {
                    continue
                }
                if (board[offsetX][offsetY] == 1 || board[offsetX][offsetY] == -1) {
                    liveCount++
                }
            }
            if (liveCount == 3 && board[i][j] == 0) {
                board[i][j] = -2
            }

            if ((liveCount < 2 || liveCount > 3) && board[i][j] == 1) {
                board[i][j] = -1
            }
        }
    }
    for (i in board.indices) {
        for (j in board[i].indices) {
            if (board[i][j] == -1) board[i][j] = 0
            else if (board[i][j] == -2) board[i][j] = 1
        }
    }
}